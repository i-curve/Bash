#!/bin/bash
# Author:curve
# 名称:初始vps网站搭建一件安装脚本
# System:Ubuntu 18.04
sudo apt-get update
sudo apt-get -y upgrade

sudo apt-get install -y zip unzip tar
sudo apt-get install -y nginx mysql-server wget
sudo apt-get install -y php7.2-fpm
cd /var/www
wget https://wordpress.org/latest.zip && unzip latest.zip && rm latest.zip
chown -R www-data wordpress/
chgrp -R www-data wordpress/

sleep 1
clear
echo "=========================="
echo "=========================="
echo "=========================="
echo "已经安装完成nginx,mysql,接下来将会安装php"
echo "=========================="
echo "注意事项"
echo "1.首相将出现选择web自动选择:此时apache,lightd一个都不选,所以按<Esc>直接退出就行"
echo "2.其次将会选择配置mysql配置选择项: 因为已经安装mysql了,所以选择<no>"
echo "=========================="
echo "若果已经明白请输入Y:继续安装,N:退出手动安装,默认继续..."
read -p "Y/N:" check
if [[ "$check" = 'N' || "$check" = "n" ]];then echo "退出" && exit 0;fi
apt-get install -y phpmyadmin
cat > /etc/nginx/sites-enabled/default <<EOF
#
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
server {
        listen 80 default_server;
        listen [::]:80 default_server;

        # SSL configuration
        #
        # listen 443 ssl default_server;        # listen [::]:443 ssl default_server;
        #
        # Note: You should disable gzip for SSL traffic.
        # See: https://bugs.debian.org/773332
        #
        # Read up on ssl_ciphers to ensure a secure configuration.
        # See: https://bugs.debian.org/765782
        #
        # Self signed certs generated by the ssl-cert package
        # Don't use them in a production server!
        #
        # include snippets/snakeoil.conf;
        root /var/www/wordpress;

        # Add index.php to the list if you are using PHP
        index index.php index.html index.htm index.nginx-debian.html;

        server_name _;

        location / {
                # First attempt to serve request as file, then
                # as directory, then fall back to displaying a 404.
                try_files \$uri \$uri/ =404;
        }
        # pass PHP scripts to FastCGI server
        #
        #location ~ \.php\$ {
        #       include snippets/fastcgi-php.conf;
        #
        #       # With php-fpm (or other unix sockets):
        #       fastcgi_pass unix:/var/run/php/php7.0-fpm.sock;
        #       # With php-cgi (or other tcp sockets):
        #       fastcgi_pass 127.0.0.1:9000;
        #}

        location ~ \.php\$ {
               include snippets/fastcgi-php.conf;

               # With php-fpm (or other unix sockets):
               fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;
               # With php-cgi (or other tcp sockets):
               #fastcgi_pass 127.0.0.1:9000;
        }
        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #       deny all;
        #}
}
EOF
service nginx restart
clear
echo "想在已经可以访问站点了,需要一个数据库"
echo "按y进入创建过程,n退出,手动创建"
read -p "Y/N:" check
if [[ "$check" = 'n' || "$check" = 'N' ]];then echo "退出" && exit 0;fi
check=0
while [[ -z "$database" || -z "$username" || -z "password" ]]
do
if [[ $check = 1 ]];then echo "有值为空,请重新输入";fi
check=1
read -p "请输入数据库名:" database
read -p "请输入用户名:" username
read -p "请输入密码:" password
done
mysql -uroot <<EOF
create database $database;
create user $username identified by '$password';
grant all privileges on $database.* to $username@'%';
EOF
echo "ok"
